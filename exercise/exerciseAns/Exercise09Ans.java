/**
 * @title javaPractice / exercise / Exercise09Ans
 * @content for, nested for, if, ２次関数, メソッド分け
 * @author shika
 * @date 2020-10-21
 */
/*
◆Exercise09
for文を用いて下記のような２次関数グラフを作図せよ。

問１
*********************************************************************************
****************************************************************
*************************************************
************************************
*************************
****************
*********
****
*

*
****
*********
****************
*************************
************************************
*************************************************
****************************************************************
*********************************************************************************

問２
                                                                 *****************
                                                  ***************
                                     *************
                          ***********
                 *********
          *******
     *****
  ***
 *
*
 *
  ***
     *****
          *******
                 *********
                          ***********
                                     *************
                                                  ***************
                                                                 *****************

問３
縦25行。２次関数 j = (i * i / 6)を使用。
関数部分を別メソッドで１回だけ記述。表示する内容を変数にする。
表示が０個の場合は最低１個は表示されるようにした。
下記の模様を作図せよ。

************************                        ************************
********************                    ********************
****************                ****************
*************             *************
**********          **********
********        ********
******      ******
****    ****
**  **
* *
* *
* *
* *
* *
* *
* *
**  **
****    ****
******      ******
********        ********
**********          **********
*************             *************
****************                ****************
********************                    ********************
************************                        ************************

*/

package javaPractice.exercise;

public class Exercise09Ans {

    public static void main(String[] args) {
        //==== 問１解答 ====
        int bound = 9; //２次関数の両端 -9 ～ 9
        for(int i = -(bound); i <= bound; i++) {
            for(int j = 1; j <= (i * i); j++) {
                System.out.print("*");
            }//for j
            System.out.println();
        }//for i
        System.out.println();

        //==== 問２解答 ====
        bound = 9;
        for(int i = -(bound); i <= bound; i++) {
            int count = 0;//空白の数をカウント。行ごとに初期化

            // i == 0 のとき空白の挿入なし
            if(i == 0){
                ;
            // i が負のとき、次の行と同じ数の空白挿入
            } else if(i < 0) {
                for(int space = 0; space <= ((i+1) * (i+1)); space++) {
                    System.out.print(" ");
                    count++;
                }//for space

            // i が正のとき、前の行と同じ数の空白挿入
            } else if(0 < i) {
                for(int space = 0; space <= ((i-1) * (i-1)); space++) {
                    System.out.print(" ");
                    count++;
                }//for space

            }//if-else-else

            //空白に続いて「*」を表示
            for(int j = count; j <= (i * i); j++) {
                System.out.print("*");

            }//for j
            System.out.println();

        }//for i

        //==== 問３解答 ====
        bound = 12;// -12～0～12 の25行
        String[] figue = {"*"," ","*"};

        for (int i = -(bound); i <= bound; i++) {

            for (int index = 0; index < figue.length; index++) {

                makeFigue(i, figue, index);

            }//for index

            System.out.println();
        }//for i
    }//main()


    private static void makeFigue(int i, String[] figue, int index) {
        //２次関数 j = (i * i / 6)
        for(int j = 1; j <= (i * i / 6); j++) {
            System.out.print(figue[index]);
        }//for j

        if((i * i / 6) < 1) {
            System.out.print(figue[index]);
        }

    }//makeFigue()

}//class

/*
◆《解説》
＊問１
for iで行をカウント、for jで「*」を並べるという構造は九九と同じ
for jの終了条件式(継続条件式)を２次関数 j <= (i * i);〔継続条件なので不等号〕にする。
２次関数を表現するために、
iの初期値をマイナスからスタートし０を通り越して正の数で終わる。こんなfor文もある。

＊問２
問１の２次関数の前に空白を挿入。Exercise08 ピラミッド形と同様。
空白の個数は i < 0 〔iが負〕のとき、次の行のiの２乗。
空白の個数は i == 0 〔iが0〕のとき、空白なし。
空白の個数は i > 0 〔iが正〕のとき、前の行のiの２乗。

空白の個数をそれぞれカウントし、「*」は空白カウントの続きに表示。

for文とif文が 入り組んで たくさん出てくるので、
自分が何の処理を書いているのか、初期値はいくつからで何回まで繰りくりかせばいいか
順を追って理解しながら記述しましょう。

ノーヒントでこれを作れたら、だいぶＪａｖａの基本構文を理解できています。
解答を見てしまったひとは、自力で作れるか挑戦してみましょう。


問３
前半の「****」と、空白と、後半の「****」いずれも同じfor jで生成できるので
別メソッドに分けて何度も使う。

メソッド化に伴い表示内容を変数化しないといけないが、今回は配列に３個入れた

main()から３つメソッド呼び出しを書いても可。メソッド内の変数も書き換える必要がある。

例
String figue = "*";
makeFigue(i, figue);

figue = " ";
makeFigue(i, figue);

figue = "*";
makeFigue(i, figue);

と同じことを何度も書いたら別メソッドに分けた意味ないので、やっぱ配列にしよう。


◇実行結果
*********************************************************************************
****************************************************************
*************************************************
************************************
*************************
****************
*********
****
*

*
****
*********
****************
*************************
************************************
*************************************************
****************************************************************
*********************************************************************************

                                                                 *****************
                                                  ***************
                                     *************
                          ***********
                 *********
          *******
     *****
  ***
 *
*
 *
  ***
     *****
          *******
                 *********
                          ***********
                                     *************
                                                  ***************
                                                                 *****************

************************                        ************************
********************                    ********************
****************                ****************
*************             *************
**********          **********
********        ********
******      ******
****    ****
**  **
* *
* *
* *
* *
* *
* *
* *
**  **
****    ****
******      ******
********        ********
**********          **********
*************             *************
****************                ****************
********************                    ********************
************************                        ************************

*/