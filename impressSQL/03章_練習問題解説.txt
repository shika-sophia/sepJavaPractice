■３章 操作する行の絞り込み / 練習問題 p102

★サンプルデータ練習問題３－１
create table 気象観測(
  月 int,
  降水量 int,
  最高気温 int,
  最低気温 int,
  湿度 int
); 

+----------+------+------+-----+---------+-------+
| Field    | Type | Null | Key | Default | Extra |
+----------+------+------+-----+---------+-------+
| 月       | int  | YES  |     | NULL    |       |
| 降水量   | int  | YES  |     | NULL    |       |
| 最高気温 | int  | YES  |     | NULL    |       |
| 最低気温 | int  | YES  |     | NULL    |       |
| 湿度     | int  | YES  |     | NULL    |       |
+----------+------+------+-----+---------+-------+

INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 1,31,11,-1,43 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 2,115,13,-3,49 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 3,142,20,-1,59 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 4,118,30,1,63 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 5,44,30,6,65 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 6,236,32,16,73 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 7,333,37,18,75 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 8,100,37,21,69 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 9,140,34,17,73 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 10,88,28,8,65 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 11,120,19,2,58 );
INSERT INTO 気象観測 ( 月,降水量,最高気温,最低気温,湿度 ) VALUES ( 12,44,14,-2,50 ); 

+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    3 |    142 |       20 |       -1 |   59 |
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
|   10 |     88 |       28 |        8 |   65 |
|   11 |    120 |       19 |        2 |   58 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


◆練習問題３－１
(1) ６月のデータ
SELECT * FROM 気象観測 WHERE 月 = 6;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    6 |    236 |       32 |       16 |   73 |
+------+--------+----------+----------+------+


(2) ６月以外のデータ
SELECT * FROM 気象観測 WHERE 月 <> 6;

<別解>
SELECT * FROM 気象観測 WHERE 月 NOT IN ( 6 );
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    3 |    142 |       20 |       -1 |   59 |
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
|   10 |     88 |       28 |        8 |   65 |
|   11 |    120 |       19 |        2 |   58 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


(3)降水量が100未満
《解説》
「未満」「より小さい」「より大きい」 -> その数を含まない。等号なしの不等号。
「以上」「以下」 -> その数を含む。等号付きの不等号。
「<=」「>=」の順。  ×「=<」「=>」は不可 (JAVAも同じ)。

SELECT * FROM 気象観測 WHERE 降水量 < 100;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    5 |     44 |       30 |        6 |   65 |
|   10 |     88 |       28 |        8 |   65 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


(4)降水量が200より多い
SELECT * FROM 気象観測 WHERE 降水量 > 200;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
+------+--------+----------+----------+------+


(5)最高気温が30以上
SELECT * FROM 気象観測 WHERE 最高気温 >= 30;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
+------+--------+----------+----------+------+


(6)最低気温が0以下
SELECT * FROM 気象観測 WHERE 最低気温 <= 0;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    3 |    142 |       20 |       -1 |   59 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+

(7)３月、５月、７月
《解説》
不規則な範囲、集合Ａ -> WHERE 列名 IN ( 範囲Ａ )
上記以外、補集合 !Ａ -> WHERE 列名 NOT IN ( 範囲Ａ )
([!]は NOTのこと)


《解答》「,」で並べる。
SELECT * FROM 気象観測 WHERE 月 IN ( 3, 6, 7 );


<別解>「,」は不可。列名を毎回書くこと。
SELECT * FROM 気象観測 WHERE 月 = 3 OR 月 = 6 OR 月 = 7 ;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    3 |    142 |       20 |       -1 |   59 |
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
+------+--------+----------+----------+------+


(8)３月、５月、７月以外
SELECT * FROM 気象観測 WHERE 月 NOT IN ( 3, 6, 7 );


<別解> 
SELECT * FROM 気象観測 WHERE 月 <> 3 AND 月 <> 6 AND 月 <> 7 ;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
|   10 |     88 |       28 |        8 |   65 |
|   11 |    120 |       19 |        2 |   58 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


<追加問題> なぜ(7)が ORで、(8)は ANDになるか考えてみよう。

「OR」で繋ぐと全部の月が出てきてしまう。
×SELECT * FROM 気象観測 WHERE 月 <> 3 OR 月 <> 6 OR 月 <> 7 ;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    3 |    142 |       20 |       -1 |   59 |
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
|   10 |     88 |       28 |        8 |   65 |
|   11 |    120 |       19 |        2 |   58 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


(9)降水量が100以下で、湿度が50より低い
SELECT * FROM 気象観測 WHERE 降水量 <= 100 AND 湿度 < 50;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
+------+--------+----------+----------+------+

《解説》
WHERE句に複数の条件があるとき「,」は不可。
２つの条件の関係が「OR」なのか「AND」なのか判断できないためエラーとなる。

×SELECT * FROM 気象観測 WHERE 降水量 <= 100, 湿度 < 50;
 
ERROR 1064 (42000): You have an error in your SQL syntax;
check the manual that corresponds to your MySQL server version
for the right syntax to use near ', 湿度 < 50' at line 1


(10)最低気温が 5未満か、最高気温が 35より高い
SELECT * FROM 気象観測 WHERE 最低気温 < 5 OR 最高気温 > 35;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    3 |    142 |       20 |       -1 |   59 |
|    4 |    118 |       30 |        1 |   63 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|   11 |    120 |       19 |        2 |   58 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


(11)湿度が60～79の範囲
SELECT * FROM 気象観測 WHERE 湿度 BETWEEN 60 AND 79;

<別解>
SELECT * FROM 気象観測 WHERE 湿度 >= 60 AND 湿度 <= 79;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
|   10 |     88 |       28 |        8 |   65 |
+------+--------+----------+----------+------+


(12)観測データのない列がある月
《解説》
NULLは「=」「<>」を使えない。p083
    -> IS NULL, IS NOT NULLを用いる。

SELECT * FROM 気象観測 
    WHERE 降水量 IS NULL
    OR 最高気温 IS NULL
    OR 最低気温 IS NULL
    OR 湿度 IS NULL
;

《結果》
Empty set (条件に適合する行がない)


全表をみてもNULLのデータがないので正しい結果
SELECT * FROM 気象観測;
+------+--------+----------+----------+------+
| 月   | 降水量 | 最高気温 | 最低気温 | 湿度 |
+------+--------+----------+----------+------+
|    1 |     31 |       11 |       -1 |   43 |
|    2 |    115 |       13 |       -3 |   49 |
|    3 |    142 |       20 |       -1 |   59 |
|    4 |    118 |       30 |        1 |   63 |
|    5 |     44 |       30 |        6 |   65 |
|    6 |    236 |       32 |       16 |   73 |
|    7 |    333 |       37 |       18 |   75 |
|    8 |    100 |       37 |       21 |   69 |
|    9 |    140 |       34 |       17 |   73 |
|   10 |     88 |       28 |        8 |   65 |
|   11 |    120 |       19 |        2 |   58 |
|   12 |     44 |       14 |       -2 |   50 |
+------+--------+----------+----------+------+


◆練習問題３－２
【LIKE演算子】列名 or 式 LIKE パターン文字列 p084

部分文字列の検索(パターンマッチング)ができるので、
探したい文字列を指定するのに とても便利で、よく使われる演算子。

＊２つのワイルドカード
	「%」0文字以上の文字列
	「_」1文字

・例:「１月」で始まる文字列
	LIKE '１月%'
	
・例:「１月」で終わる文字列
	LIKE '%１月'
	
・例:「１月」をどこかに含む文字列
	LIKE '%１月%'

・例: メールアドレス
	LIKE '%_@_%'

・例: ＵＲＬ(http://～, https://～) http%でも良いが「http」にも一致してしまう。
	LIKE 'http%://_%'


＊「%」と「_%」の違い
・例 John% -> John, Johns, Johnsonに一致
     John_% -> Johns, Johnsonに一致 (Johnは不一致)


＊「_」による文字数の指定
・例: 携帯電話の番号
	LIKE '___-____-____' (3文字-4文字-4文字)

・例
_ (1文字)
__ (2文字)
___ (3文字)
____ (4文字)


＊「%」「_」を文字そのものとして検索したいとき p086
    -> そのままだと LIKE演算子の記号と解釈されて検索できない文字
    -> エスケープ文字を指定して、エスケープ文字の直後に書くことで「%」「_」を検索できる。

＊ESCARE句 p086
ESCAPE (エスケープ文字の指定)

・×例 SELECT * FROM 家計簿 WHERE メモ LIKE '%100%';
     -> 「100」を含む文字列という意味になる

・〇例 SELECT * FROM 家計簿 WHERE メモ LIKE '%100$%' ESCAPE '$';
     -> 「100%」で終わる文字列で検索
          
・〇例 SELECT * FROM 家計簿 WHERE メモ LIKE '%100$%%' ESCAPE '$';
     -> 「100%」を含む文字列で検索


＊【応用】CASE式とLIKE演算子の併用
     場合分けのできる CASE式〔５章 後述〕と LIKE演算子を併用することでパターンによる場合分けが可能。
     

＊【註】空白の不一致 
LIKEは下記の２例を不一致(=別物)と判定することに注意。
どうしても必要なときはTRIM関数で空白を除去する〔TRIM関数は５章で後述〕

「Smith」
「Smith 」(1文字空白)


◆練習問題３－２
問題２－３で用いた都道府県テーブルについて、次のデータを取得せよ。
(1)「川」で終わる都道府県名
《解説》「～で終わる」から、「川」を末尾に持つ都道府県名を検索
    -> WHERE句に列名「都道府県名」を挙げ、その後ろに LIKE演算子 'パターン文字列'

《解答》
SELECT 都道府県名 FROM 都道府県 WHERE 都道府県名 LIKE '%川';
+------------+
| 都道府県名 |
+------------+
| 神奈川     |
| 香川       |
+------------+


(2)都道府県名に「島」を含む都道府県名
《解説》「～を含む」から、今度は末尾だけでなく、どこかに「島」を含むものを探す
    -> 同様に WHERE 都道府県名 LIKE 'パターン文字列'
    
《解答》
SELECT 都道府県名 FROM 都道府県 WHERE 都道府県名 LIKE '%島%';
Empty set (0.00 sec)

(サンプルデータが入っていないので「Empty set」となる。
全都道府県が入っていたら、「福島」「島根」「鹿児島」が検索される)


(3)都道府県名が「愛」で始まる都道府県名
《解説》「～で始まる」からパターン文字列の先頭だけを指定

《解答》
SELECT 都道府県名 FROM 都道府県 WHERE 都道府県名 LIKE '愛%';
Empty set (0.00 sec)

(上記と同じ理由で「Empty set」。本来なら「愛知」「愛媛」)


(4)都道府県名が県庁所在地と一致するデータ
《解説》「県庁所在地」は固定値ではなく列名なので「'」は不要。
    -> 「一致する」から、比較演算子「=」を使う
    -> 求められているのは「データ」なので、全列を検索「*」

《解答》
SELECT * FROM 都道府県 WHERE 都道府県名 = 県庁所在地;
+--------+------+------------+------------+------+
| コード | 地域 | 都道府県名 | 県庁所在地 | 面積 |
+--------+------+------------+------------+------+
| 27     | 近畿 | 大阪       | 大阪       | 1899 |
| 40     | 九州 | 福岡       | 福岡       | 4976 |
+--------+------+------------+------------+------+


(5)都道府県名が県庁所在地と一致しないデータ
《解説》「県庁所在地」は固定値ではなく列名なので「'」は不要。
    -> 「一致しない」から、比較演算子「<>」を使う
    -> 求められているのは「データ」なので、全列を検索「*」

《解答》
SELECT * FROM 都道府県 WHERE 都道府県名 <> 県庁所在地;
+--------+------+------------+------------+------+
| コード | 地域 | 都道府県名 | 県庁所在地 | 面積 |
+--------+------+------------+------------+------+
| 15     | 関東 | 神奈川     | 横浜       | 2416 |
| 37     | 四国 | 香川       | 高松       | 1876 |
+--------+------+------------+------------+------+


◆練習問題３－３
★成績表テーブル作成
CREATE TABLE 成績表 (  学籍番号 CHAR(4), 学生名 VARCHAR(20), 法学 INTEGER, 経済学 INTEGER, 哲学 INTEGER, 情報理論 INTEGER, 外国語 INTEGER, 総合成績 CHAR(1)  );

SHOW COLUMNS FROM 成績表;
+----------+-------------+------+-----+---------+-------+
| Field    | Type        | Null | Key | Default | Extra |
+----------+-------------+------+-----+---------+-------+
| 学籍番号 | char(4)     | YES  |     | NULL    |       |
| 学生名   | varchar(20) | YES  |     | NULL    |       |
| 法学     | int         | YES  |     | NULL    |       |
| 経済学   | int         | YES  |     | NULL    |       |
| 哲学     | int         | YES  |     | NULL    |       |
| 情報理論 | int         | YES  |     | NULL    |       |
| 外国語   | int         | YES  |     | NULL    |       |
| 総合成績 | char(1)     | YES  |     | NULL    |       |
+----------+-------------+------+-----+---------+-------+

◆練習問題３－３
(1) (元のデータが空の場合、(2)を実行してからでないとデータが出ない)

(2) 学生と科目を追加する
《解説》全列にデータを入れる際は、列名省略可。

《解答》
INSERT INTO 成績表 
    (学籍番号,学生名,法学,経済学,哲学,情報理論,外国語,総合成績)
    VALUES ('S001','織田　信長',77,55,80,75,93,NULL);
 
INSERT INTO 成績表 
    (学籍番号,学生名,法学,経済学,哲学,情報理論,外国語,総合成績)
    VALUES ('A002','豊臣　秀吉',64,69,70,0,59,NULL);
    
INSERT INTO 成績表 
    (学籍番号,学生名,法学,経済学,哲学,情報理論,外国語,総合成績) 
    VALUES ('E003','徳川　家康',80,83,85,90,79,NULL);


(1) 上記データを表示
SELECT * FROM 成績表;
+----------+------------+------+--------+------+----------+--------+----------+
| 学籍番号 | 学生名     | 法学 | 経済学 | 哲学 | 情報理論 | 外国語 | 総合成績 |
+----------+------------+------+--------+------+----------+--------+----------+
| S001     | 織田　信長 |   77 |     55 |   80 |       75 |     93 | NULL     |
| A002     | 豊臣　秀吉 |   64 |     69 |   70 |        0 |     59 | NULL     |
| E003     | 徳川　家康 |   80 |     83 |   85 |       90 |     79 | NULL     |
+----------+------------+------+--------+------+----------+--------+----------+


(3) 学籍番号「S001」の法学を85、哲学を67に修正。
《解説》「～に修正」から、UPDATE文

《解答》
UPDATE 成績表
    SET 法学 = 85, 哲学 = 67
    WHERE 学籍番号 = 'S001'
;

Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

【註】↑ここを確認しよう。
「Query OK」=> SQLの文法的にOK。言われた通り実行しました
「1 row affected」=> １行分に影響ありました。(ここが 0になっているとSQL文が影響を与えてないので注意)
「(0.01 sec)」=> これを出すのに 0.01秒で出した。
「Rows matched: 1」=> WHERE句の条件に適合した行は、１行。
「Changed: 1」=> SQL文で変更した行は、１行。
「Warnings: 0」=> 警告が出ている行、０行。


《結果》
mysql> SELECT * FROM 成績表;
+----------+------------+------+--------+------+----------+--------+----------+
| 学籍番号 | 学生名     | 法学 | 経済学 | 哲学 | 情報理論 | 外国語 | 総合成績 |
+----------+------------+------+--------+------+----------+--------+----------+
| S001     | 織田　信長 |   85 |     55 |   67 |       75 |     93 | NULL     |
| A002     | 豊臣　秀吉 |   64 |     69 |   70 |        0 |     59 | NULL     |
| E003     | 徳川　家康 |   80 |     83 |   85 |       90 |     79 | NULL     |
+----------+------------+------+--------+------+----------+--------+----------+


(4)学籍番号「A002」「E003」の外国語を81にする。
※【註】テキストの解答を入れても正しい結果は得られない。
インプレス『スッキリわかるＳＱＬ 第２版』の正誤表にも表示なし。
https://book.impress.co.jp/books/1118101071

◆〔ネット記事〕MySQLで複数行を一括でUPDATEする
https://qiita.com/masuidrive/items/0671ea7efa91a99c0268
データベースを運用していると、一気にデータを投入したり、更新する必要が出てきます。
MySQLではINSERT文では複数行同時に更新できますが、UPDATEでは用意されていません。

【註】この記事では「JOIN句 (８章)」を用いるSQL文を紹介している


＊WHERE句「IN」 テキストの解答
UPDATE 成績表
    SET 外国語 = 81
    WHERE 学籍番号 IN ('AOO2','E003')
;
Query OK, 0 rows affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

【註】↑１行しか適合してなく、↓やっぱり１行しか変更していない。

mysql> SELECT * FROM 成績表;
+----------+------------+------+--------+------+----------+--------+----------+
| 学籍番号 | 学生名     | 法学 | 経済学 | 哲学 | 情報理論 | 外国語 | 総合成績 |
+----------+------------+------+--------+------+----------+--------+----------+
| S001     | 織田　信長 |   85 |     55 |   67 |       75 |     93 | NULL     |
| A002     | 豊臣　秀吉 |   64 |     69 |   70 |        0 |     59 | NULL     |
| E003     | 徳川　家康 |   80 |     83 |   85 |       90 |     81 | NULL     |
+----------+------------+------+--------+------+----------+--------+----------+


＊《別解》WHERE句「OR」にすると
UPDATE 成績表
    SET 外国語 = 81
    WHERE 学籍番号 = 'AOO2' OR 学籍番号 = 'E003'
;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 0  Warnings: 0

【註】↑やっぱり１行しか適合してなく、さっき変えたので変更は 0。

SELECT * FROM 成績表;
+----------+------------+------+--------+------+----------+--------+----------+
| 学籍番号 | 学生名     | 法学 | 経済学 | 哲学 | 情報理論 | 外国語 | 総合成績 |
+----------+------------+------+--------+------+----------+--------+----------+
| S001     | 織田　信長 |   85 |     55 |   67 |       75 |     93 | NULL     |
| A002     | 豊臣　秀吉 |   64 |     69 |   70 |        0 |     59 | NULL     |
| E003     | 徳川　家康 |   80 |     83 |   85 |       90 |     81 | NULL     |
+----------+------------+------+--------+------+----------+--------+----------+


＊《×参考》WHERE句「AND」にすると
UPDATE 成績表
    SET 外国語 = 81
    WHERE 学籍番号 = 'AOO2' AND 学籍番号 = 'E003'
;
Query OK, 0 rows affected (0.00 sec)
Rows matched: 0  Changed: 0  Warnings: 0

【註】SQLの文法的には合っているがWHERE句の「AND」だと適合する行がない。


＊《×参考》WHERE句「NOT IN」にすると
UPDATE 成績表
    SET 外国語 = 81
    WHERE 学籍番号 NOT IN ('SOO1')
;
Query OK, 2 rows affected (0.01 sec)
Rows matched: 3  Changed: 2  Warnings: 0

【註】これは明らかに おかしい。３行適合して、上記の残り２つを変更してしまった。


《×参考》複問い合わせ(７章)で行けるのでは
UPDATE 成績表
    SET 外国語 = 81
    WHERE 学籍番号 = (
        SELECT 学籍番号 FROM 成績表 
        WHERE 学籍番号 IN ('AOO2','E003')
    );
ERROR 1093 (HY000): 
You can't specify target table '成績表' for update in FROM clause

◆〔ネット記事〕MySQLで 
「You can't specify target table 'xxxx' for update in FROM clause 」を回避する方法
https://qiita.com/Kohei-Sato-1221/items/d1cbdc1d3affcd9c3a9e

(原因)
どうやらMySQLでは同一テーブルのサブクエリからのUPDATE文はエラーが発生する模様。
上記の文では、where区内のサブクエリにsyainTbl(テーブル名)を使用しているため、
syainTbl(テーブル名)のカラムはupdateできないということらしい。

(解決方法)
以下の通り、select文でラップしてaliasを付けてあげるとうまくいく。

UPDATE 成績表
    SET 外国語 = 81
    WHERE 学籍番号 IN (
        SELECT 学籍番号 
        FROM 
        (SELECT 学籍番号 FROM 成績表
        WHERE 学籍番号 IN ('AOO2','E003')
        )tmp
    )
;
Query OK, 0 rows affected (0.00 sec)
Rows matched: 1  Changed: 0  Warnings: 0

【註】いや、できとらんし・・


(5)次のルールで「総合成績」を更新する
[1]全科目80点以上 => 「A」
[2]法学・外国語どちらかが80点以上で、
   経済学・哲学のどちらかが80点以上 => 「B」
[3]全科目50未満 => 「D」
[4]それ以外 => 「C」

《解説》
    ・一気に完成したSQL文を作ろうとせずに、
        少しずつ条件をSQL文にしていき、最後に合体させる
    ・長くなるSQL文は必要に応じて、改行・インデント(字下げ)を使って見やすく書く
      (テキストのような書き方をマネしないようにしましょう)

《解答》
[1] 
UPDATE 成績表
    SET 総合成績 = 'A'
    WHERE 法学 >= 80
      AND 経済学 >= 80
      AND 哲学 >= 80
      AND 情報理論 >= 80
      AND 外国語 >= 80
;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

[2]
《解説》「OR」「AND」の範囲が判るように「()」でくくる。
   条件に「総合成績 IS NULL」を加えておかないと、成績「A」の行も上書きしてしまう。
《解答》
UPDATE 成績表
    SET 総合成績 = 'B'
    WHERE (法学 >= 80 OR 外国語 >= 80)
      AND (経済学 >= 80 OR 哲学 >= 80)
      AND 総合成績 IS NULL
;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

[3]
《解説》[1]の回答をコピーしてきて、必要部分を書き換える。
《解答》
UPDATE 成績表
    SET 総合成績 = 'D'
    WHERE 法学 < 50
      AND 経済学 < 50
      AND 哲学 < 50
      AND 情報理論 < 50
      AND 外国語 < 50
      AND 総合成績 IS NULL
;
Query OK, 0 rows affected (0.00 sec)
Rows matched: 0  Changed: 0  Warnings: 0

[4]
《解説》「それ以外」は上から順に実行していくと、
    条件にあてはまらなかったものは、総合成績がまだ「NULL」のまま
《解答》
UPDATE 成績表
    SET 総合成績 = 'C'
    WHERE 総合成績 IS NULL
;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

SELECT * FROM 成績表;
+----------+------------+------+--------+------+----------+--------+----------+
| 学籍番号 | 学生名     | 法学 | 経済学 | 哲学 | 情報理論 | 外国語 | 総合成績 |
+----------+------------+------+--------+------+----------+--------+----------+
| S001     | 織田　信長 |   77 |     55 |   80 |       75 |     93 | B        |
| A002     | 豊臣　秀吉 |   64 |     69 |   70 |        0 |     59 | C        |
| E003     | 徳川　家康 |   80 |     83 |   85 |       90 |     81 | A        |
+----------+------------+------+--------+------+----------+--------+----------+


(6)いずれかの科目に 0 がある学生を成績表テーブルから削除。
《解説》「いずれかの科目」より、WHERE句「OR」を使う
《解答》
DELETE FROM 成績表
    WHERE 法学 = 0
       OR 経済学 = 0
       OR 哲学 = 0
       OR 情報理論 = 0
       OR 外国語 = 0
;

SELECT * FROM 成績表;
+----------+------------+------+--------+------+----------+--------+----------+
| 学籍番号 | 学生名     | 法学 | 経済学 | 哲学 | 情報理論 | 外国語 | 総合成績 |
+----------+------------+------+--------+------+----------+--------+----------+
| S001     | 織田　信長 |   77 |     55 |   80 |       75 |     93 | B        |
| E003     | 徳川　家康 |   80 |     83 |   85 |       90 |     81 | A        |
+----------+------------+------+--------+------+----------+--------+----------+


◆練習問題３－４
主キーにふさわしい列名はどれか
《解説》主キー(primary key)
＊主キーとなる列が持つべき特性 [p097]
・必ず何らかのデータが格納されている (NULLになっている行がない)
・他の行と値が重複しない

《解答》
気象観測テーブル => 月
都道府県テーブル => コード
成績表テーブル => 学籍番号



